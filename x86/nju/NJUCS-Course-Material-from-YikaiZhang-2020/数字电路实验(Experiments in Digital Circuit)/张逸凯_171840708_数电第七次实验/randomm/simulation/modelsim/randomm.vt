// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "04/28/2019 12:20:08"
                                                                                
// Verilog Test Bench template for design : randomm
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 10 ns/ 1 ps
module randomm_vlg_tst();
// constants                                           
// general purpose registers
// reg eachvec;
// test vector input registers
reg [2:0] choose;
reg clk;
reg [7:0] data_in;
reg en;
// wires                                               
wire [7:0]  Q;
wire [6:0]  seg0;
wire [6:0]  seg1;

// assign statements (if any)                          
randomm i1 (
// port map - connection between master ports and signals/registers   
	.Q(Q),
	.choose(choose),
	.clk(clk),
	.data_in(data_in),
	.en(en),
	.seg0(seg0),
	.seg1(seg1)
);
initial                                                
begin                                                  
choose = 3'b001; clk = 0; data_in = 8'b11111111; en = 1; #2;
choose = 3'b101;
end

always
begin
	#1 clk = ~clk;
end
endmodule