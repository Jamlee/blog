// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "03/25/2019 00:08:48"
                                                                                
// Verilog Test Bench template for design : ALU
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 10 ns/ 1 ps
module ALU_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg asel;
reg bsel;
reg [2:0] choose;
reg [6:0] t;
// wires                                               
wire [6:0]  Aeg;
wire [6:0]  Beg;
wire [6:0]  Ceg;
wire [6:0]  Deg;
wire [6:0]  Eeg;
wire [6:0]  Feg;
wire ZF;
wire carry;
wire out;
wire overflow;

// assign statements (if any)                          
ALU i1 (
// port map - connection between master ports and signals/registers   
	.Aeg(Aeg),
	.Beg(Beg),
	.Ceg(Ceg),
	.Deg(Deg),
	.Eeg(Eeg),
	.Feg(Feg),
	.ZF(ZF),
	.asel(asel),
	.bsel(bsel),
	.carry(carry),
	.choose(choose),
	.out(out),
	.overflow(overflow),
	.t(t)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin 
asel = 1; t = 7'b1000001; asel = 0; bsel = 1; t =7'b0000011; choose=3'b000; #10;
									 choose=3'b001; #10;
									 choose=3'b010; #10;
									 choose=3'b011; #10;
									 choose=3'b100; #10;
									 choose=3'b101; #10;
									 choose=3'b111; #10;
											                         
                                                       
// --> end                                             
$display("Running testbench");                       
end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
                                                       
@eachvec;                                              
// --> end                                             
end                                                    
endmodule

